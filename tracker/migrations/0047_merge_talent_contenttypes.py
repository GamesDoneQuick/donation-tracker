# Generated by Django 5.1 on 2024-09-30 23:00
import contextlib

from django.db import migrations


def merge_content_types(apps, schema_editor):
    ContentType = apps.get_model('contenttypes', 'ContentType')
    rct = ContentType.objects.filter(app_label='tracker', model='runner').first()
    nct = ContentType.objects.filter(app_label='tracker', model='talent').first()
    hct = ContentType.objects.filter(app_label='tracker', model='headset').first()
    if rct is None or hct is None:  # initial migration or some other weird state, bail
        return
    if nct is None:
        rct.model = 'talent'
        rct.save()
    Permission = apps.get_model('auth', 'Permission')
    runner_permissions = Permission.objects.filter(content_type=rct)
    headset_permissions = Permission.objects.filter(content_type=hct).prefetch_related('user_set', 'group_set')

    for rp in runner_permissions:
        if rp.codename.split('_')[1] == 'runner':
            rp.codename = rp.codename.replace('runner', 'talent')
            rp.name = rp.name.replace('runner', 'talent')
            rp.save()

    for hp in headset_permissions:
        with contextlib.suppress(StopIteration):  # weird, but bail instead of exploding
            rp = next(rp for rp in runner_permissions if rp.codename.split('_')[0] == hp.codename.split('_')[0])
            rp.user_set.add(*hp.user_set.all())
            rp.group_set.add(*hp.group_set.all())

    # this does not attempt to merge LogEntry because that mapping is probably more trouble than its worth,
    #  and if you really need that info it's still in the database unless you explicitly go and purge it


def noop(a, b):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('tracker', '0046_rename_runner_and_headset'),
    ]

    operations = [
        migrations.RunPython(merge_content_types, noop, elidable=True)
    ]
