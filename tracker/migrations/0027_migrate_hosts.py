# Generated by Django 4.1.5 on 2023-02-20 23:55
import logging

from django.db import migrations

logger = logging.getLogger(__name__)

# noinspection PyPep8Naming
def migrate_from_slots(apps, schema_editor):
    HostSlot = apps.get_model('tracker', 'HostSlot')
    SpeedRun = apps.get_model('tracker', 'SpeedRun')
    Headset = apps.get_model('tracker', 'Headset')
    db_alias = schema_editor.connection.alias
    for slot in HostSlot.objects.using(db_alias):
        hostnames = slot.name.split(',')
        hosts = [Headset.objects.get_or_create(name=name.strip())[0] for name in hostnames]
        for run in SpeedRun.objects.filter(
            event=slot.start_run.event,
            order__gte=slot.start_run.order,
            order__lte=slot.end_run.order
        ):
            run.hosts.set(hosts)


def migrate_to_slots(apps, schema_editor):
    HostSlot = apps.get_model('tracker', 'HostSlot')
    SpeedRun = apps.get_model('tracker', 'SpeedRun')
    db_alias = schema_editor.connection.alias
    for run in SpeedRun.objects.using(db_alias).prefetch_related('hosts'):
        slot = HostSlot.objects.filter(start_run__order__lte=run.order, end_run__order__gte=run.order).first()
        if slot:
            logger.warning(f'Skipping host slot creation for run with id {run.id} due to conflict')
            continue
        HostSlot.objects.create(start_run=run, end_run=run, name=', '.join(h.name for h in run.hosts.all()))

class Migration(migrations.Migration):
    dependencies = [
        ('tracker', '0026_add_hosts_commentators'),
    ]

    operations = [
        migrations.RunPython(migrate_from_slots, migrate_to_slots),
    ]
