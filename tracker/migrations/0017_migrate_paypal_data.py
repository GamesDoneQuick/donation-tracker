# Generated by Django 2.2.16 on 2020-10-16 22:34
import logging
import random

from django.db import migrations

logger = logging.getLogger(__name__)

def get_donation_from_ipn(Donation, ipn):
    try:
        pk = int(ipn.custom.split(':')[0])
    except:
        logger.warning(f'Could not parse custom {ipn.custom!r} for IPN #{ipn.pk}')
        return None
    try:
        return Donation.objects.get(pk=pk)
    except Donation.DoesNotExist:
        logger.warning(f'Donation #{pk} does not exist, skipping')
        return None

def fill_in_alias(Donor, donor):
    existing = set(d.alias_num for d in Donor.objects.filter(alias=donor.alias))
    available = [i for i in range(1000, 10000) if i not in existing]
    if not available:
        logger.warning(
            f'Could not set alias `{donor.alias}` because the namespace was full'
        )
        donor.alias = None
        donor.alias_num = None
    else:
        donor.alias_num = random.choice(available)

def ipn_backfill(apps, schema_editor):
    PayPalIPN = apps.get_model('ipn', 'paypalipn')
    Donation = apps.get_model('tracker', 'donation')
    Donor = apps.get_model('tracker', 'donor')
    DonorPayPalInfo = apps.get_model('tracker', 'donorpaypalinfo')
    Event = apps.get_model('tracker', 'event')
    IPNSettings = apps.get_model('tracker', 'ipnsettings')
    new_donors = set()
    for ipn in PayPalIPN.objects.filter(flag=False).exclude(custom='').order_by('payment_date'):
        donation = get_donation_from_ipn(Donation, ipn)
        if donation is None:
            continue
        if ipn.payer_status == 'verified':
            email = ipn.payer_email
        else:
            # will get removed from the donor record by the next migration
            email = f'unverified-{ipn.payer_email}'
        donor, created = Donor.objects.get_or_create(paypalemail=email, defaults=dict(email=donation.requestedemail,
                                                                                      alias=donation.requestedalias))
        if created:
            new_donors.add(donor)
        donation.donor = donor
        donation.save()
        donation.ipn.add(ipn)
        DonorPayPalInfo.objects.get_or_create(donor=donor, defaults=dict(payer_id=ipn.payer_id, payer_email=ipn.payer_email, payer_verified=ipn.payer_status == 'verified'))
    for donor in new_donors:
        fill_in_alias(Donor, donor)
        donor.save()
    for event in Event.objects.all():
        IPNSettings.objects.create(event=event, receiver_email=event.paypalemail, currency=event.paypalcurrency, logo_url=event.paypalimgurl)


def ipn_reversal(apps, schema_editor):
    PayPalIPN = apps.get_model('ipn', 'paypalipn')
    Donation = apps.get_model('tracker', 'donation')
    Donor = apps.get_model('tracker', 'donor')
    IPNSettings = apps.get_model('tracker', 'ipnsettings')
    for ipn in PayPalIPN.objects.filter(flag=False).exclude(custom='').order_by('payment_date'):
        donation = get_donation_from_ipn(Donation, ipn)
        if donation is None:
            continue
        donation.donor = Donor.objects.get(paypalemail=ipn.payer_email)
        donation.save()
    for settings in IPNSettings.objects.all():
        settings.event.paypalemail = settings.receiver_email
        settings.event.paypalcurrency = settings.currency
        settings.event.paypalimgurl = settings.logo_url

class Migration(migrations.Migration):

    dependencies = [
        ('tracker', '0016_add_paypal_tables'),
    ]

    operations = [
        migrations.RunPython(ipn_backfill, ipn_reversal, elidable=True),
    ]
