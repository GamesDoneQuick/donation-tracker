trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: tracker_backend_tests
    dependsOn: []
    displayName: Tracker Backend
    strategy:
      matrix:
        Latest:
          PYTHON_VERSION: '3.10'
          DJANGO_VERSION: '3.2'
        Oldest:
          PYTHON_VERSION: '3.7'
          DJANGO_VERSION: '2.2'
        Django22:
          PYTHON_VERSION: '3.9'
          DJANGO_VERSION: '2.2'
        Python37:
          PYTHON_VERSION: '3.7'
          DJANGO_VERSION: '3.2'
        Python38:
          PYTHON_VERSION: '3.8'
          DJANGO_VERSION: '3.2'
        Python39:
          PYTHON_VERSION: '3.9'
          DJANGO_VERSION: '3.2'

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(PYTHON_VERSION)'
          architecture: 'x64'

      - task: CacheBeta@1
        inputs:
          key: pip | $(Agent.OS) | "$(DJANGO_VERSION)" | tests/requirements.txt | setup.py
          path: $(Pipeline.Workspace)/../../.cache/pip
        displayName: 'Cache pip'

      - task: CacheBeta@1
        inputs:
          key: yarn | $(Agent.OS) | production | yarn.lock
          path: $(Build.SourcesDirectory)/node_modules
        displayName: 'Cache yarn'

      - script: |
          python -m pip install --upgrade pip setuptools wheel
        displayName: 'Install Python base packages'

      - script: |
          pip install . -r tests/requirements.txt django~=$(DJANGO_VERSION)
        displayName: 'Install Python prerequisites'

      - script: |
          python check_migrations.py
        displayName: 'Check for bad or missing migrations'

      - script: |
          python runtests.py --parallel --no-input
        displayName: 'Run Django tests'

      - task: PublishTestResults@2
        inputs:
          testResultsFiles: '**/TEST-*.xml'
          testRunTitle: 'Python $(PYTHON_VERSION)'
        condition: succeededOrFailed()

  - job: build_package
    displayName: Tracker Package
    steps:
      - task: CacheBeta@1
        inputs:
          key: pip | $(Agent.OS) | setup.py
          path: $(Pipeline.Workspace)/../../.cache/pip
        displayName: 'Cache pip'

      - task: CacheBeta@1
        inputs:
          key: yarn | $(Agent.OS) | production | yarn.lock
          path: $(Build.SourcesDirectory)/node_modules
        displayName: 'Cache yarn'

      - script: |
          python -m pip install --upgrade pip setuptools wheel
          python setup.py package
        displayName: 'Build Package'

  - job: tracker_frontend_tests
    dependsOn: []
    displayName: Tracker Frontend
    continueOnError: true
    variables:
      YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
    strategy:
      matrix:
        Node14:
          NODE_VERSION: 14
        Node16:
          NODE_VERSION: 16

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '$(NODE_VERSION)'

      - task: Cache@2
        inputs:
          key: yarn | $(Agent.OS) | "$(NODE_VERSION)" | development | yarn.lock
          path: $(YARN_CACHE_FOLDER)
        displayName: 'Cache yarn'

      - script: yarn --frozen-lockfile
        displayName: 'yarn install'

      - script: yarn build
        displayName: 'build'

      - script: yarn prettier
        displayName: 'Formatting (prettier)'

      - script: yarn tsc
        displayName: 'Typechecking (typescript)'

      - script: yarn lint
        displayName: 'Linting (eslint)'

      - script: yarn test
        displayName: 'tests (Karma)'
